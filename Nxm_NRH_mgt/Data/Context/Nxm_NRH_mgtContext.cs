// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Nxm_NRH_mgt.Models;

public partial class Nxm_NRH_mgtContext : DbContext
{
    public Nxm_NRH_mgtContext()
    {
    }

    public Nxm_NRH_mgtContext(DbContextOptions<Nxm_NRH_mgtContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AggregatedService> aggregatedServices { get; set; }

    public virtual DbSet<AggregatedServiceRelation> AggregatedServiceRelations { get; set; }

    public virtual DbSet<Groupp> Groupps { get; set; }

    public virtual DbSet<ParticiPantBinding> ParticiPantBindings { get; set; }

    public virtual DbSet<Participant> Participants { get; set; }

    public virtual DbSet<ProfileRole> ProfileRoles { get; set; }

    public virtual DbSet<Profiling> Profilings { get; set; }

    public virtual DbSet<ReceiverService> ReceiverServices { get; set; }

    public virtual DbSet<ServicE> Services { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=HAYDAR-AL-GHAZA\\MSSQLSERVER19;Initial Catalog=Nxm_NRH_mgt;Integrated Security=True;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AggregatedServiceRelation>(entity =>
        {
            entity.HasOne(d => d.aggregatedService).WithMany().HasConstraintName("FK_AggregatedService");

            entity.HasOne(d => d.receiverService).WithMany().HasConstraintName("FK_AggregatedServiceRelation_ReceiverService");
        });

        modelBuilder.Entity<Groupp>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK_Group");
        });

        modelBuilder.Entity<ParticiPantBinding>(entity =>
        {
            entity.HasOne(d => d.ownercervise).WithMany(p => p.ParticiPantBindings).HasConstraintName("FK_ParticiPantBinding_ReceiverService");

            entity.HasOne(d => d.ownerparticipant).WithMany(p => p.ParticiPantBindings).HasConstraintName("FK_ParticiPantBinding_Participant");
        });

        modelBuilder.Entity<Participant>(entity =>
        {
            entity.HasOne(d => d.owneGroup).WithMany(p => p.Participants).HasConstraintName("FK_Participant_Groupp");
        });

        modelBuilder.Entity<ProfileRole>(entity =>
        {
            entity.HasOne(d => d.profiling).WithMany()
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProfileRole_Profiling");
        });

        modelBuilder.Entity<ReceiverService>(entity =>
        {
            entity.HasOne(d => d.profiling).WithMany(p => p.ReceiverServices).HasConstraintName("FK_ReceiverService_Profiling");
        });

        modelBuilder.Entity<ServicE>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK_Service");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}